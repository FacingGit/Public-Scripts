--// Settings
getgenv().Settings = {
    ObjectiveESP = true,
}

--// Executing again will only change settings
if (getgenv().Ran) then
    return
end
getgenv().Ran = true

--// Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:getService("Workspace")
local Players = Game:getService("Players")

--// Variables
local Player = Players.LocalPlayer
local ModelBlacklist = {
    "CUBE",
    "SaferoomDoor",
    "SaferoomDoor2",
    "Bus"
}

--// Functions
function SendNotification(Te)
    StarterGui:SetCore("SendNotification", {Title="Highlight Success", Text=tostring(Te)})
end

function HighlightPart(Part)
    if (Part == nil) then return end
    
    local Highlight = Instance.new("Highlight")
    Highlight.Parent = Part
    Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    Highlight.Enabled = true
end

function IsHighlighted(Part)
    if (Part:FindFirstChildWhichIsA("Highlight") == nil) then
        return false
    end
    return true
end

function IsModelHighlighted(Model)
    for _,v in pairs(Model:GetChildren()) do
        if (v:FindFirstChildWhichIsA("Highlight") ~= nil) then
            return true 
        end
    end
    return false
end

function ObjectiveESP()
    local Objectives = game.Workspace.Game.Map.Parts:FindFirstChild("Objectives")
    if (Objectives == nil) then return completionObjectives end
    
    for i,v in pairs(Objectives:GetChildren()) do
        if (v:FindFirstChild("Task") ~= nil) then
            local Task = require(v.Task)
            local Key = v:FindFirstChild("Key")
            local Part = v:FindFirstChild("Part")
            local Switch = v:FindFirstChild("Switch")
            local Door = v:FindFirstChild("Door")
            local Model = v:FindFirstChildWhichIsA("Model")
            
            if (Task.TaskLength) then
                if (Key ~= nil and IsHighlighted(Key) == false) then
                    HighlightPart(Key)
                    SendNotification(tostring(Key.Name))
                    
                elseif (Part ~= nil and IsHighlighted(Part) == false and Model == nil) then
                    HighlightPart(Part)
                    SendNotification(tostring(Part.Parent.Name))
                    
                elseif (Switch ~= nil and Switch.Parent.Name ~= "Opener" and IsHighlighted(Switch) == false) then
                    HighlightPart(Switch)
                    HighlightPart(v:FindFirstChild("Mover"))
                    HighlightPart(v:FindFirstChild("A"))
                    HighlightPart(v:FindFirstChild("Det1"))
                    SendNotification(tostring(Switch.Parent.Name))
                
                elseif (Door ~= nil and Door.Parent.Name == "Doorway" and IsHighlighted(Door) == false) then
                    HighlightPart(Door)
                    SendNotification(tostring(Door.Parent.Name))
                    
                elseif (Model ~= nil and (Part == nil or Switch == nil) and table.find(ModelBlacklist, Model.Name) == nil and IsModelHighlighted(Model) == false) then
                    for _,v in pairs(Model:GetChildren()) do
                       HighlightPart(v)
                    end
                    SendNotification(tostring(Model.Name))
                end
            end
        end
    end
end

--// Heartbeat
RunService.Heartbeat:Connect(function()
    if (getgenv().Settings.ObjectiveESP == true) then
        ObjectiveESP()
    end
end)
